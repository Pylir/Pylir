name: Linux

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  linux-build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          - { cxx_compiler: clang++, c_compiler: clang, sanitizer: "" }
          - { cxx_compiler: clang++, c_compiler: clang, sanitizer: "address,undefined" }
          - { cxx_compiler: clang++, c_compiler: clang, sanitizer: "thread" }
          - { cxx_compiler: g++-10, c_compiler: gcc-10 }

    steps:

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install libunwind-dev g++-10 lld clang

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Ninja
        uses: ashutoshvarma/setup-ninja@v1.1

      - name: Checkout Pylir
        uses: actions/checkout@v3
        with:
          path: Pylir

      - name: Install Python depends
        run: |
          python -m pip install -r ${{github.workspace}}/Pylir/test/requirements.txt

      # See https://github.com/actions/cache/issues/53.
      - name: Sanitize key
        id: sanitize-key
        run: echo "key=$(echo ${{matrix.sanitizer}} | sed 's/,/_and_/g')" >> $GITHUB_OUTPUT

      - name: Calculate cache size
        id: cache-size
        shell: pwsh
        run: |
          if ('${{matrix.sanitizer}}') {
             "size=1.5G" >> $Env:GITHUB_OUTPUT
          } else {
             "size=0.5G" >> $Env:GITHUB_OUTPUT
          }

      - name: Install CCache
        uses: Chocobo1/setup-ccache-action@v1
        with:
          ccache_options: |
            max_size=${{steps.cache-size.outputs.size}}
          override_cache_key: ${{runner.os}}-${{steps.sanitize-key.outputs.key}}-${{matrix.cxx_compiler}}

      - name: Build LLVM
        id: llvm-build
        uses: ./Pylir/.github/actions/llvm-build
        with:
          c-compiler: ${{matrix.c_compiler}}
          cpp-compiler: ${{matrix.cxx_compiler}}
          sanitizers: ${{matrix.sanitizer}}

      - name: Configure Pylir
        run: |
          if [[ ! -z "${{matrix.sanitizer}}" ]]
          then
            SAN_ARG=-DPYLIR_SANITIZER=${{matrix.sanitizer}}
          fi
          cmake -GNinja -Bpylir-build \
            -DCMAKE_BUILD_TYPE=Release \
            -DPYLIR_EMBED_LLD=ON \
            -DCMAKE_CXX_COMPILER=${{matrix.cxx_compiler}} \
            -DCMAKE_C_COMPILER=${{matrix.c_compiler}} \
            $SAN_ARG \
            -DPython3_EXECUTABLE="$(which python)" \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld" \
            -DCMAKE_CXX_FLAGS="-g1" \
            -DPYLIR_ENABLE_ASSERTIONS=ON \
            -DLLVM_DIR="${{steps.llvm-build.outputs.install-dir}}/lib/cmake/llvm/" \
            -DMLIR_DIR="${{steps.llvm-build.outputs.install-dir}}/lib/cmake/mlir/" \
            -DLLD_DIR="${{steps.llvm-build.outputs.install-dir}}/lib/cmake/lld/" \
            -S ${{github.workspace}}/Pylir

      - name: Build Pylir
        run: |
          cmake --build pylir-build

      - name: Test
        working-directory: ${{github.workspace}}/pylir-build
        run: ctest --extra-verbose

