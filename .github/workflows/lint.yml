name: Lint

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

env:
  LLVM_VERSION: 15

jobs:
  lint-run:
    runs-on: ubuntu-22.04

    steps:
      - name: Install dependencies
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh $LLVM_VERSION all
          sudo apt update
          sudo apt install libunwind-dev lld
          
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      # Required by clang-tidy-diff.py.
      - name: Install Python depends
        run: |
          python -m pip install pyyaml

      - name: Install Ninja
        uses: ashutoshvarma/setup-ninja@v1.1

      - name: Checkout Pylir
        uses: actions/checkout@v3
        with:
          path: Pylir
          # Depth 2 because we use git diff HEAD^ later.
          fetch-depth: 2

      - name: Install CCache
        uses: Chocobo1/setup-ccache-action@v1
        with:
          ccache_options: |
            max_size=0.5G
          override_cache_key: ${{runner.os}}-clang-tidy

      - name: Build LLVM
        id: llvm-build
        uses: ./Pylir/.github/actions/llvm-build
        with:
          c-compiler: clang
          cpp-compiler: clang++

      # Since we are reusing the cache from the normal build we should also use the same compiler options here.
      - name: Configure Pylir
        run: |
          cmake -GNinja -Bpylir-build \
            -DCMAKE_BUILD_TYPE=Release \
            -DPYLIR_EMBED_LLD=ON \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DCMAKE_C_COMPILER=clang \
            -DPython3_EXECUTABLE="$(which python)" \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld" \
            -DPYLIR_ENABLE_ASSERTIONS=ON \
            -DLLVM_DIR="${{steps.llvm-build.outputs.install-dir}}/lib/cmake/llvm/" \
            -DMLIR_DIR="${{steps.llvm-build.outputs.install-dir}}/lib/cmake/mlir/" \
            -DLLD_DIR="${{steps.llvm-build.outputs.install-dir}}/lib/cmake/lld/" \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -S ${{github.workspace}}/Pylir

      - name: Build Pylir
        run: |
          cmake --build pylir-build -- -k0

      # We let clang-tidy output a fixes.yml file. If no warnings have ever been emitted it will be empty, otherwise
      # we exit with an error code.
      - name: Run clang-tidy
        working-directory: ${{github.workspace}}/Pylir
        run: |
          git diff -U0 HEAD^ | \
          clang-tidy-diff-$LLVM_VERSION.py -p1 -quiet -use-color -path ${{github.workspace}}/pylir-build \
            -export-fixes ${{github.workspace}}/fixes.yml -clang-tidy-binary $(which clang-tidy-$LLVM_VERSION) \
          -j$(nproc)
          
          if [ -s ${{github.workspace}}/fixes.yml ] 
          then
            exit 1
          fi

      - name: Upload clang-tidy fixes.yml
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: fixes.yml
          path: ${{github.workspace}}/fixes.yml


  format-run:
    runs-on: ubuntu-20.04

    steps:
      - name: Install dependencies
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh $LLVM_VERSION all
          
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Checkout Pylir
        uses: actions/checkout@v3
        with:
          # Depth 2 because we need the diff.
          fetch-depth: 2

      - name: Run clang-format on changes
        run: |
          # Below ensures that the exit code of git-clang-format is properly propagated
          set -o pipefail
          python $(which git-clang-format-$LLVM_VERSION) --binary $(which clang-format-$LLVM_VERSION) --diff HEAD^ \
            | tee ${{github.workspace}}/clang-format.patch

      - name: Upload clang-format patch
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: clang-format.patch
          path: ${{github.workspace}}/clang-format.patch

