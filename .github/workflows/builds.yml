name: Builds

permissions:
  contents: read
  actions: write

on:
  push:
    branches: [ "main" ]
  pull_request:

env:
  LLVM_LINT_VERSION: 15

jobs:
  Build-LLVM:
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: windows-2022, cpp-compiler: clang-cl, c-compiler: clang-cl, runtime_lib: "MultiThreaded" }
          - { os: windows-2022, cpp-compiler: clang-cl, c-compiler: clang-cl, runtime_lib: "MultiThreadedDebug" }
          - { os: windows-2022, cpp-compiler: clang++, c-compiler: clang }
          - { os: windows-2022, cpp-compiler: clang++, c-compiler: clang, sanitizers: "address,undefined" }
          - { os: ubuntu-22.04, cpp-compiler: clang++, c-compiler: clang }
          - { os: ubuntu-22.04, cpp-compiler: clang++, c-compiler: clang, shared_libs: "ON" }
          - { os: ubuntu-22.04, cpp-compiler: clang++, c-compiler: clang, sanitizers: "thread" }
          - { os: ubuntu-22.04, cpp-compiler: clang++, c-compiler: clang, sanitizers: "address,undefined" }
          - { os: ubuntu-22.04, cpp-compiler: g++-10, c-compiler: gcc-10 }
          - { os: macos-12, cpp-compiler: clang++, c-compiler: clang }
    uses: ./.github/workflows/llvm-build.yml
    with:
      os: ${{matrix.os}}
      c-compiler: ${{matrix.c-compiler}}
      cpp-compiler: ${{matrix.cpp-compiler}}
      sanitizers: ${{matrix.sanitizers}}
      runtime_lib: ${{matrix.runtime_lib}}
      shared_libs: ${{matrix.shared_libs}}

  Builds:
    needs: [ Build-LLVM ]

    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: windows-2022, cpp-compiler: clang-cl, c-compiler: clang-cl, runtime_lib: "MultiThreaded" }
          - { os: windows-2022, cpp-compiler: clang-cl, c-compiler: clang-cl, runtime_lib: "MultiThreadedDebug" }
          - { os: windows-2022, cpp-compiler: clang++, c-compiler: clang }
          - { os: windows-2022, cpp-compiler: clang++, c-compiler: clang, sanitizers: "address,undefined" }
          - { os: ubuntu-22.04, cpp-compiler: clang++, c-compiler: clang }
          - { os: ubuntu-22.04, cpp-compiler: clang++, c-compiler: clang, shared_libs: "ON" }
          - { os: ubuntu-22.04, cpp-compiler: clang++, c-compiler: clang, sanitizers: "thread" }
          - { os: ubuntu-22.04, cpp-compiler: clang++, c-compiler: clang, sanitizers: "address,undefined" }
          - { os: ubuntu-22.04, cpp-compiler: g++-10, c-compiler: gcc-10 }
          - { os: macos-12, cpp-compiler: clang++, c-compiler: clang }

    runs-on: ${{matrix.os}}
    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout Pylir
        uses: actions/checkout@v3
        with:
          path: Pylir

      - name: Install Dependencies
        id: dep-install
        uses: ./Pylir/.github/actions/dependencies
        with:
          c-compiler: ${{matrix.c-compiler}}
          cpp-compiler: ${{matrix.cpp-compiler}}
          sanitizers: ${{matrix.sanitizers}}
          runtime_lib: ${{matrix.runtime_lib}}
          shared_libs: ${{matrix.shared_libs}}

      - name: Install Python depends
        run: |
          Invoke-expression "$Env:pythonLocation\python -m pip install -r ${{github.workspace}}/Pylir/test/requirements.txt"

      - name: Fetch LLVM
        id: llvm-fetch
        uses: ./Pylir/.github/actions/llvm-fetch
        with:
          key: ${{steps.dep-install.outputs.key}}

      - name: Configure Pylir
        run: |
          $sanitizer_arg = ''
          if ('${{matrix.sanitizer}}') {
            $sanitizer_arg = '-DPYLIR_SANITIZERS="${{matrix.sanitizer}}"', '-DCMAKE_CXX_FLAGS="-g1"'
          }
          $runtime_arg = ''
          if ('${{matrix.runtime_lib}}') {
            $runtime_arg = '-DCMAKE_MSVC_RUNTIME_LIBRARY=${{matrix.runtime_lib}}'
          }
          $shared_libs = ''
          if ('${{matrix.shared_libs}}') {
            $shared_libs = '-DBUILD_SHARED_LIBS=ON'
          }
          $use_lld = ''
          if (!$IsMacOs) {
            $use_lld = '-DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld"'
          }
          
          cmake -GNinja -Bpylir-build `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_cpp-compiler=${{matrix.cpp-compiler}} `
            -DCMAKE_c-compiler=${{matrix.c-compiler}} `
            @sanitizer_arg `
            $runtime_arg `
            $shared_libs `
            -DPython3_ROOT_DIR="$Env:pythonLocation" -DPython3_FIND_STRATEGY=LOCATION `
            -DCMAKE_c-compiler_LAUNCHER=ccache `
            -DCMAKE_cpp-compiler_LAUNCHER=ccache `
            $use_lld `
            -DPYLIR_ENABLE_ASSERTIONS=ON `
            -DLLVM_DIR="${{steps.llvm-fetch.outputs.install-dir}}/lib/cmake/llvm/" `
            -DMLIR_DIR="${{steps.llvm-fetch.outputs.install-dir}}/lib/cmake/mlir/" `
            -DLLD_DIR="${{steps.llvm-fetch.outputs.install-dir}}/lib/cmake/lld/" `
            -S ${{github.workspace}}/Pylir

      - name: Build Pylir
        run: |
          cmake --build pylir-build

      - name: Test
        working-directory: ${{github.workspace}}/pylir-build
        run: ctest --extra-verbose

      - name: Cleanup disk space
        if: always()
        run: |
          Remove-Item -Recurse -Force pylir-build -ErrorAction Ignore
