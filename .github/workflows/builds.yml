name: Builds

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  Builds:
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: windows-2022, cxx_compiler: clang-cl, c_compiler: clang-cl, runtime_lib: "MultiThreaded" }
          - { os: windows-2022, cxx_compiler: clang-cl, c_compiler: clang-cl, runtime_lib: "MultiThreadedDebug" }
          - { os: windows-2022, cxx_compiler: clang++, c_compiler: clang }
          - { os: windows-2022, cxx_compiler: clang++, c_compiler: clang, sanitizer: "address,undefined" }
          - { os: ubuntu-22.04, cxx_compiler: clang++, c_compiler: clang }
          - { os: ubuntu-22.04, cxx_compiler: clang++, c_compiler: clang, shared_libs: "ON" }
          - { os: ubuntu-22.04, cxx_compiler: clang++, c_compiler: clang, sanitizer: "thread" }
          - { os: ubuntu-22.04, cxx_compiler: clang++, c_compiler: clang, sanitizer: "address,undefined" }
          - { os: ubuntu-22.04, cxx_compiler: g++-10, c_compiler: gcc-10 }
          - { os: macos-12, cxx_compiler: clang++, c_compiler: clang }

    runs-on: ${{matrix.os}}
    defaults:
      run:
        shell: pwsh

    steps:

      - name: Install Ninja
        uses: ashutoshvarma/setup-ninja@v1.1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install dependencies
        if: ${{ contains(matrix.os, 'ubuntu') }}
        shell: bash
        run: |
          sudo apt update
          sudo apt install libunwind-dev g++-10 lld clang

      - name: Use developer command prompt
        if: ${{ matrix.cxx_compiler == 'clang-cl' }}
        uses: ilammy/msvc-dev-cmd@v1

      - uses: msys2/setup-msys2@v2
        if: ${{ matrix.cxx_compiler == 'clang++' && contains(matrix.os, 'windows') }}
        with:
          msystem: clang64
          update: true
          pacboy: >-
            toolchain:p
          location: D:\

      - name: Prepend Msys2 to path
        if: ${{ matrix.cxx_compiler == 'clang++' && contains(matrix.os, 'windows') }}
        run: echo "D:\msys64\clang64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8

      - name: Checkout Pylir
        uses: actions/checkout@v3
        with:
          path: Pylir

      - name: Install Python depends
        run: |
          Invoke-expression "$Env:pythonLocation\python -m pip install -r ${{github.workspace}}/Pylir/test/requirements.txt"

      # See https://github.com/actions/cache/issues/53.
      - name: Sanitize key
        id: sanitize-key
        run: |
          "key=$( '${{matrix.sanitizer}}'.Replace(',', '_and_') )" >> $Env:GITHUB_OUTPUT

      - name: Calculate cache size
        id: cache-opts
        run: |
          if ('${{matrix.sanitizer}}') {
             "size=1.5G" >> $Env:GITHUB_OUTPUT
          } else {
             "size=0.5G" >> $Env:GITHUB_OUTPUT
          }
          
          # Using the compilers mtime is not reliable on MacOS for some reason. As a workaround we do the following to
          # key ccache on the compiler: We just use the output of the compilers '-v' command. That should only change
          # during new releases and therefore preserve the cache. Might also be faster this way since ccache does not
          # have to do anything except compare the keys given here to the one used to produce the files.
          $compiler_version = ${{matrix.cxx_compiler}} -v 2>&1 | Out-String
          $stream = [IO.MemoryStream]::new([byte[]][char[]]$compiler_version)
          $hash = (Get-FileHash -InputStream $stream -Algorithm SHA256).Hash
          "check=string:$hash" >> $Env:GITHUB_OUTPUT

      - name: Install CCache
        uses: Chocobo1/setup-ccache-action@v1
        with:
          ccache_options: |
            max_size=${{steps.cache-opts.outputs.size}}
            compiler_check=${{steps.cache-opts.outputs.check}}
          override_cache_key: ${{runner.os}}-${{steps.sanitize-key.outputs.key}}-${{matrix.runtime_lib}}-${{matrix.cxx_compiler}}${{matrix.shared_libs}}
          windows_compile_environment: msvc

      - name: Build LLVM
        id: llvm-build
        uses: ./Pylir/.github/actions/llvm-build
        with:
          c-compiler: ${{matrix.c_compiler}}
          cpp-compiler: ${{matrix.cxx_compiler}}
          sanitizers: ${{matrix.sanitizer}}
          runtime_lib: ${{matrix.runtime_lib}}
          shared_libs: ${{matrix.shared_libs}}

      - name: Configure Pylir
        run: |
          $sanitizer_arg = ''
          if ('${{matrix.sanitizer}}') {
            $sanitizer_arg = '-DPYLIR_SANITIZER="${{matrix.sanitizer}}" -DCMAKE_CXX_FLAGS="-g1"'
          }
          $runtime_arg = ''
          if ('${{matrix.runtime_lib}}') {
            $runtime_arg = '-DCMAKE_MSVC_RUNTIME_LIBRARY=${{matrix.runtime_lib}}'
          }
          $shared_libs = ''
          if ('${{matrix.shared_libs}}') {
            $shared_libs = '-DBUILD_SHARED_LIBS=ON'
          }
          $use_lld = ''
          if (!$IsMacOs) {
            $use_lld = '-DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld"'
          }
          
          cmake -GNinja -Bpylir-build `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_CXX_COMPILER=${{matrix.cxx_compiler}} `
            -DCMAKE_C_COMPILER=${{matrix.c_compiler}} `
            $sanitizer_arg `
            $runtime_arg `
            $shared_libs `
            -DPython3_ROOT_DIR="$Env:pythonLocation" -DPython3_FIND_STRATEGY=LOCATION `
            -DCMAKE_C_COMPILER_LAUNCHER=ccache `
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache `
            $use_lld `
            -DPYLIR_ENABLE_ASSERTIONS=ON `
            -DLLVM_DIR="${{steps.llvm-build.outputs.install-dir}}/lib/cmake/llvm/" `
            -DMLIR_DIR="${{steps.llvm-build.outputs.install-dir}}/lib/cmake/mlir/" `
            -DLLD_DIR="${{steps.llvm-build.outputs.install-dir}}/lib/cmake/lld/" `
            -S ${{github.workspace}}/Pylir

      - name: Build Pylir
        run: |
          cmake --build pylir-build

      - name: Test
        working-directory: ${{github.workspace}}/pylir-build
        run: ctest --extra-verbose

      - name: Cleanup disk space
        if: always()
        run: |
          Remove-Item -Recurse -Force llvm-optimized-tblgen -ErrorAction Ignore
          Remove-Item -Recurse -Force llvm-build -ErrorAction Ignore
          Remove-Item -Recurse -Force pylir-build -ErrorAction Ignore

