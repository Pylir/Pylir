name: Builds

permissions:
  contents: read
  actions: write

on:
  push:
    branches: [ "main" ]
  pull_request:

env:
  LLVM_LINT_VERSION: 15

jobs:
  Build-Standard-LLVM-Linux:
    uses: ./.github/workflows/llvm-build.yml
    with:
      os: ubuntu-22.04
      c-compiler: clang
      cpp-compiler: clang++

  Build-LLVM-Others:
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: windows-2022, cpp-compiler: clang-cl, c-compiler: clang-cl, runtime_lib: "MultiThreaded" }
          - { os: windows-2022, cpp-compiler: clang-cl, c-compiler: clang-cl, runtime_lib: "MultiThreadedDebug" }
          - { os: windows-2022, cpp-compiler: clang++, c-compiler: clang }
          - { os: windows-2022, cpp-compiler: clang++, c-compiler: clang, sanitizers: "address,undefined" }
          - { os: ubuntu-22.04, cpp-compiler: clang++, c-compiler: clang, shared_libs: "ON" }
          - { os: ubuntu-22.04, cpp-compiler: clang++, c-compiler: clang, sanitizers: "thread" }
          - { os: ubuntu-22.04, cpp-compiler: clang++, c-compiler: clang, sanitizers: "address,undefined" }
          - { os: ubuntu-22.04, cpp-compiler: g++-10, c-compiler: gcc-10 }
          - { os: macos-12, cpp-compiler: clang++, c-compiler: clang }
    uses: ./.github/workflows/llvm-build.yml
    with:
      os: ${{matrix.os}}
      c-compiler: ${{matrix.c-compiler}}
      cpp-compiler: ${{matrix.cpp-compiler}}
      sanitizers: ${{matrix.sanitizers}}
      runtime_lib: ${{matrix.runtime_lib}}
      shared_libs: ${{matrix.shared_libs}}

  Builds:
    needs: [ Build-Standard-LLVM-Linux, Build-LLVM-Others ]

    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: windows-2022, cpp-compiler: clang-cl, c-compiler: clang-cl, runtime_lib: "MultiThreaded" }
          - { os: windows-2022, cpp-compiler: clang-cl, c-compiler: clang-cl, runtime_lib: "MultiThreadedDebug" }
          - { os: windows-2022, cpp-compiler: clang++, c-compiler: clang }
          - { os: windows-2022, cpp-compiler: clang++, c-compiler: clang, sanitizers: "address,undefined" }
          - { os: ubuntu-22.04, cpp-compiler: clang++, c-compiler: clang }
          - { os: ubuntu-22.04, cpp-compiler: clang++, c-compiler: clang, shared_libs: "ON" }
          - { os: ubuntu-22.04, cpp-compiler: clang++, c-compiler: clang, sanitizers: "thread" }
          - { os: ubuntu-22.04, cpp-compiler: clang++, c-compiler: clang, sanitizers: "address,undefined" }
          - { os: ubuntu-22.04, cpp-compiler: g++-10, c-compiler: gcc-10 }
          - { os: macos-12, cpp-compiler: clang++, c-compiler: clang }

    runs-on: ${{matrix.os}}
    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout Pylir
        uses: actions/checkout@v3
        with:
          path: Pylir

      - name: Install Dependencies
        id: dep-install
        uses: ./Pylir/.github/actions/dependencies
        with:
          c-compiler: ${{matrix.c-compiler}}
          cpp-compiler: ${{matrix.cpp-compiler}}
          sanitizers: ${{matrix.sanitizers}}
          runtime_lib: ${{matrix.runtime_lib}}
          shared_libs: ${{matrix.shared_libs}}

      - name: Install Python depends
        run: |
          Invoke-expression "$Env:pythonLocation\python -m pip install -r ${{github.workspace}}/Pylir/test/requirements.txt"

      - name: Fetch LLVM
        id: llvm-fetch
        uses: ./Pylir/.github/actions/llvm-fetch
        with:
          key: ${{steps.dep-install.outputs.key}}

      - name: Configure Pylir
        run: |
          $sanitizer_arg = ''
          if ('${{matrix.sanitizers}}') {
            $sanitizer_arg = '-DPYLIR_SANITIZERS="${{matrix.sanitizers}}"', '-DCMAKE_CXX_FLAGS="-g1"'
          }
          $runtime_arg = ''
          if ('${{matrix.runtime_lib}}') {
            $runtime_arg = '-DCMAKE_MSVC_RUNTIME_LIBRARY=${{matrix.runtime_lib}}'
          }
          $shared_libs = ''
          if ('${{matrix.shared_libs}}' -eq 'ON') {
            $shared_libs = '-DBUILD_SHARED_LIBS=ON'
          }
          $use_lld = ''
          if (!$IsMacOs) {
            $use_lld = '-DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld"'
          }
          
          cmake -GNinja -Bpylir-build `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_CXX_COMPILER=${{matrix.cpp-compiler}} `
            -DCMAKE_C_COMPILER=${{matrix.c-compiler}} `
            @sanitizer_arg `
            $runtime_arg `
            $shared_libs `
            -DPython3_ROOT_DIR="$Env:pythonLocation" -DPython3_FIND_STRATEGY=LOCATION `
            -DCMAKE_C_COMPILER_LAUNCHER=ccache `
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache `
            $use_lld `
            -DPYLIR_ENABLE_ASSERTIONS=ON `
            -DLLVM_DIR="${{steps.llvm-fetch.outputs.install-dir}}/lib/cmake/llvm/" `
            -DMLIR_DIR="${{steps.llvm-fetch.outputs.install-dir}}/lib/cmake/mlir/" `
            -DLLD_DIR="${{steps.llvm-fetch.outputs.install-dir}}/lib/cmake/lld/" `
            -S ${{github.workspace}}/Pylir

      - name: Build Pylir
        run: |
          cmake --build pylir-build

      - name: Test
        working-directory: ${{github.workspace}}/pylir-build
        run: ctest --extra-verbose

      - name: Cleanup disk space
        if: always()
        run: |
          Remove-Item -Recurse -Force pylir-build -ErrorAction Ignore

  lint-run:
    needs: [ Build-Standard-LLVM-Linux ]

    runs-on: ubuntu-22.04
    steps:

      - name: Install clang-tidy
        run: |
          sudo apt-get update
          sudo apt-get install clang-tidy-$LLVM_LINT_VERSION

      - name: Checkout Pylir
        uses: actions/checkout@v3
        with:
          path: Pylir
          # Depth 2 because we use git diff HEAD^ later.
          fetch-depth: 2

      - name: Install Dependencies
        id: dep-install
        uses: ./Pylir/.github/actions/dependencies
        with:
          c-compiler: clang
          cpp-compiler: clang++

      # Required by clang-tidy-diff.py.
      - name: Install Python depends
        run: |
          python -m pip install pyyaml

      - name: Fetch LLVM
        id: llvm-fetch
        uses: ./Pylir/.github/actions/llvm-fetch
        with:
          key: ${{steps.dep-install.outputs.key}}

      - name: Configure Pylir
        run: |
          cmake -GNinja -Bpylir-build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DCMAKE_C_COMPILER=clang \
            -DPython3_ROOT_DIR="$pythonLocation" \
            -DPython3_FIND_STRATEGY=LOCATION \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld" \
            -DPYLIR_ENABLE_ASSERTIONS=ON \
            -DLLVM_DIR="${{steps.llvm-fetch.outputs.install-dir}}/lib/cmake/llvm/" \
            -DMLIR_DIR="${{steps.llvm-fetch.outputs.install-dir}}/lib/cmake/mlir/" \
            -DLLD_DIR="${{steps.llvm-fetch.outputs.install-dir}}/lib/cmake/lld/" \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -S ${{github.workspace}}/Pylir

      - name: Build Pylir
        run: |
          cmake --build pylir-build -- -k0

      # We let clang-tidy output a fixes.yml file. If no warnings have ever been emitted it will be empty, otherwise
      # we exit with an error code.
      - name: Run clang-tidy
        working-directory: ${{github.workspace}}/Pylir
        run: |
          git diff -U0 HEAD^ :^3rdParty '***.c' '***.h' '***.hpp' '***.cpp' \
           | clang-tidy-diff-$LLVM_LINT_VERSION.py -p1 -quiet -use-color -path ${{github.workspace}}/pylir-build \
             -export-fixes ${{github.workspace}}/fixes.yml -clang-tidy-binary $(which clang-tidy-$LLVM_LINT_VERSION) \
             -j$(nproc)
          
          if [ -s ${{github.workspace}}/fixes.yml ] 
          then
            exit 1
          fi

      - name: Upload clang-tidy fixes.yml
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: fixes.yml
          path: ${{github.workspace}}/fixes.yml

  format-run:
    runs-on: ubuntu-22.04

    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install clang-format-$LLVM_LINT_VERSION

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Checkout Pylir
        uses: actions/checkout@v3
        with:
          # Depth 2 because we need the diff.
          fetch-depth: 2

      - name: Run clang-format on changes
        run: |
          # Below ensures that the exit code of git-clang-format is properly propagated
          set -o pipefail
          git diff -U0 HEAD^ :^3rdParty '***.c' '***.h' '***.hpp' '***.cpp' \
           | clang-format-diff-$LLVM_LINT_VERSION -p1 -binary $(which clang-format-$LLVM_LINT_VERSION) \
           | tee ${{github.workspace}}/clang-format.patch

      - name: Upload clang-format patch
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: clang-format.patch
          path: ${{github.workspace}}/clang-format.patch

  build-docs:
    needs: [ Build-Standard-LLVM-Linux ]

    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout Pylir
        uses: actions/checkout@v3
        with:
          path: Pylir

      - name: Install Dependencies
        id: dep-install
        uses: ./Pylir/.github/actions/dependencies
        with:
          c-compiler: clang
          cpp-compiler: clang++

      - name: Install Python depends
        run: |
          Invoke-expression "$Env:pythonLocation\python -m pip install -r ${{github.workspace}}/Pylir/docs/requirements.txt"

      - name: Fetch LLVM
        id: llvm-fetch
        uses: ./Pylir/.github/actions/llvm-fetch
        with:
          key: ${{steps.dep-install.outputs.key}}

      - name: Configure Pylir
        run: |
          cmake -GNinja -Bpylir-build `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_CXX_COMPILER=clang++ `
            -DCMAKE_C_COMPILER=clang `
            -DPython3_ROOT_DIR="$Env:pythonLocation" -DPython3_FIND_STRATEGY=LOCATION `
            -DCMAKE_C_COMPILER_LAUNCHER=ccache `
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache `
            -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld" `
            -DPYLIR_ENABLE_ASSERTIONS=ON `
            -DPYLIR_BUILD_DOCS=ON `
            -DLLVM_DIR="${{steps.llvm-fetch.outputs.install-dir}}/lib/cmake/llvm/" `
            -DMLIR_DIR="${{steps.llvm-fetch.outputs.install-dir}}/lib/cmake/mlir/" `
            -DLLD_DIR="${{steps.llvm-fetch.outputs.install-dir}}/lib/cmake/lld/" `
            -S ${{github.workspace}}/Pylir

      - name: Build Docs
        run: cmake --build pylir-build --target docs

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docs
          if-no-files-found: error
          path: ${{github.workspace}}/pylir-build/docs/build
